{"version":3,"file":"static/js/901.ef40917e.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/SearchFilter/SearchFilter.jsx","components/ContactList/ContactList.jsx","../node_modules/@chakra-ui/layout/src/heading.tsx","pages/Phonebook.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\n\nexport const selectFilteredContacts = state => {\n    const {filter, items} = state.contacts;\n   console.log(filter, items)\n\n    if(!filter) {\n        return items;\n    }\n\n    const filteredContacts = items.filter(\n        ({name}) => name.toLowerCase().includes(filter.toLowerCase())\n    );\n    console.log('zzz',filteredContacts);\n     return filteredContacts;\n};\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectLoading = state => state.contacts.isLoading;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {useDispatch, useSelector} from 'react-redux';\n// import {Form, Label, Input, Btn} from './ContactForm.styled'\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport {selectContacts} from 'redux/contacts/contactsSelectors';\n\nconst ContactForm = () => {\n\nconst [name, setName] = useState('');\nconst [number, setNumber] = useState('');\nconst contacts = useSelector(selectContacts);\nconst dispatch = useDispatch();\n\nconst handleChange = (e) => {\n    const {name, value} = e.currentTarget;\n    \n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n        \n        case 'number':\n            setNumber(value);\n            break;\n\n        default: return;    \n    }\n}\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n        if (contacts && contacts.find((c) => c.name === name || c.number.trim() === number.trim())) {\n            reset();\n            return alert (`This contact already exists`);\n          \n        }\n        dispatch(addContact({name: name, number: number}))\n        reset();\n    };\n    \nconst reset = () => {\n    setName('');\n    setNumber('');\n}\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"\">\n                    Name\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        value={name}\n                        onChange={handleChange}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    />\n                </label>\n                <label htmlFor=\"\">\n                Phone number\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required \n                />\n                </label>\n                <button type='submit'>Add contact</button>     \n            </form>\n        </>        \n     )\n    }\n\nContactForm.propTypes = {\n    onFormSubmit: PropTypes.func,\n};\n\nexport default ContactForm;","import PropTypes from 'prop-types';\n// import {Input, SubTitle} from './SearchFilter.styled'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\nconst SearchFilter = () => {\n\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  console.log(filter)\n\n    return (\n    <div>\n      <h2>Find contact by name</h2>\n      <input\n        type=\"text\" \n        value={filter}\n        onChange={e => {dispatch(filterContacts(e.currentTarget.value))}}/>\n    </div>\n  )\n};\n\nSearchFilter.propTypes = {\n  onChange: PropTypes.func,\n};\n\nexport default SearchFilter;","import PropTypes from 'prop-types';\n// import {Contact, Btn, Container} from './ContactList.styled';\nimport { Container } from 'components/Container/Container';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { selectFilteredContacts} from 'redux/contacts/contactsSelectors';\n\nconst ContactList = () => {\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectFilteredContacts);\n   \n\n    const onContactDelete = contactId => {\n        dispatch(deleteContact(contactId))\n    };\n\n    return (\n\n       <Container>\n            <h2>Contacts</h2>\n        \n            {contacts && contacts.map(({id, name, number}) => {\n            return (\n                <li key={id}>\n                    {name}: {number}\n                    <button \n                    type=\"button\"\n                    name=\"delete\"\n                    onClick={() => onContactDelete(id)}>Delete</button>\n                </li> )\n            })}\n        </Container>\n    )  \n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string,\n          name: PropTypes.string,\n          number: PropTypes.string,\n        })\n      ),\n      deleteContact: PropTypes.func,\n    };\n\nexport default ContactList;","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {Container} from '../components/Container/Container';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport SearchFilter from '../components/SearchFilter/SearchFilter';\nimport ContactList from '../components/ContactList/ContactList'\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\n\nimport { Heading } from '@chakra-ui/react'             \n\nconst Phonebook = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Container>\n            <Heading as='h3' size='lg' color='lightsteelblue'>Phonebook</Heading>\n            <ContactForm />\n            <SearchFilter />\n            <ContactList />\n        </Container>\n    )\n};\n\nexport default Phonebook;"],"names":["selectContacts","state","contacts","items","selectFilteredContacts","_state$contacts","filter","console","log","filteredContacts","_ref","name","toLowerCase","includes","selectFilter","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","_e$currentTarget","currentTarget","value","reset","_jsx","_Fragment","children","_jsxs","onSubmit","preventDefault","find","c","trim","alert","addContact","htmlFor","type","onChange","pattern","title","required","filterContacts","Container","map","id","onClick","contactId","deleteContact","Heading","forwardRef","props","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","rest","className","_objectWithoutProperties","_excluded","jsx","chakra","_objectSpread","cx","__css","displayName","useEffect","fetchContacts","as","size","color","ContactForm","SearchFilter","ContactList"],"sourceRoot":""}